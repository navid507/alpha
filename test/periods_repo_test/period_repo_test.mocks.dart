// Mocks generated by Mockito 5.0.17 from annotations
// in alpha/test/periods_repo_test/period_repo_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i11;

import 'package:alpha/back/accounting/abstracts/accounting_api_abstract.dart'
    as _i9;
import 'package:alpha/back/accounting/abstracts/accounting_repo_abstract.dart'
    as _i15;
import 'package:alpha/back/accounting/accounting_repo.dart' as _i13;
import 'package:alpha/back/accounting/models/swimmer.dart' as _i14;
import 'package:alpha/back/accounting/user_stored_data.dart' as _i8;
import 'package:alpha/back/periods/models/medical/medical_result.dart' as _i7;
import 'package:alpha/back/periods/models/period/period_result.dart' as _i6;
import 'package:alpha/back/periods/models/period/periods_result.dart' as _i3;
import 'package:alpha/back/periods/models/session/sessions_result.dart' as _i5;
import 'package:alpha/back/periods/perdiods_apis.dart' as _i10;
import 'package:alpha/back/periods/sessions_api.dart' as _i12;
import 'package:alpha/main_functions/http_functions.dart' as _i2;
import 'package:alpha/main_functions/main_models/api_result.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeHttpFunctionsInterface_0 extends _i1.Fake
    implements _i2.HttpFunctionsInterface {}

class _FakePeriodsResult_1 extends _i1.Fake implements _i3.PeriodsResult {}

class _FakeAPIResult_2 extends _i1.Fake implements _i4.APIResult {}

class _FakeSessionsResult_3 extends _i1.Fake implements _i5.SessionsResult {}

class _FakePeriodResult_4 extends _i1.Fake implements _i6.PeriodResult {}

class _FakeMedicalsResult_5 extends _i1.Fake implements _i7.MedicalsResult {}

class _FakeStateResult_6 extends _i1.Fake implements _i4.StateResult {}

class _FakeUserStoredData_7 extends _i1.Fake implements _i8.UserStoredData {}

class _FakeAccountingApiInterface_8 extends _i1.Fake
    implements _i9.AccountingApiInterface {}

/// A class which mocks [PeriodsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeriodsApi extends _i1.Mock implements _i10.PeriodsApi {
  MockPeriodsApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpFunctionsInterface get http =>
      (super.noSuchMethod(Invocation.getter(#http),
              returnValue: _FakeHttpFunctionsInterface_0())
          as _i2.HttpFunctionsInterface);
  @override
  set http(_i2.HttpFunctionsInterface? _http) =>
      super.noSuchMethod(Invocation.setter(#http, _http),
          returnValueForMissingStub: null);
  @override
  _i11.Future<_i3.PeriodsResult> getAllPeriods() => (super.noSuchMethod(
          Invocation.method(#getAllPeriods, []),
          returnValue: Future<_i3.PeriodsResult>.value(_FakePeriodsResult_1()))
      as _i11.Future<_i3.PeriodsResult>);
  @override
  _i11.Future<_i3.PeriodsResult> getRegisteredPeriods({int? userID}) =>
      (super.noSuchMethod(
              Invocation.method(#getRegisteredPeriods, [], {#userID: userID}),
              returnValue:
                  Future<_i3.PeriodsResult>.value(_FakePeriodsResult_1()))
          as _i11.Future<_i3.PeriodsResult>);
  @override
  _i11.Future<_i4.APIResult> registerPeriod(
          {String? userToken,
          int? userID,
          String? periodID,
          String? discountCode,
          String? type}) =>
      (super.noSuchMethod(
              Invocation.method(#registerPeriod, [], {
                #userToken: userToken,
                #userID: userID,
                #periodID: periodID,
                #discountCode: discountCode,
                #type: type
              }),
              returnValue: Future<_i4.APIResult>.value(_FakeAPIResult_2()))
          as _i11.Future<_i4.APIResult>);
  @override
  _i11.Future<_i4.APIResult> cancelPeriod(
          {String? userToken, int? userID, String? periodID}) =>
      (super.noSuchMethod(
              Invocation.method(#cancelPeriod, [], {
                #userToken: userToken,
                #userID: userID,
                #periodID: periodID
              }),
              returnValue: Future<_i4.APIResult>.value(_FakeAPIResult_2()))
          as _i11.Future<_i4.APIResult>);
  @override
  _i11.Future<_i4.APIResult> buyPeriod({int? userID, String? periodID}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #buyPeriod, [], {#userID: userID, #periodID: periodID}),
              returnValue: Future<_i4.APIResult>.value(_FakeAPIResult_2()))
          as _i11.Future<_i4.APIResult>);
  @override
  _i11.Future<_i4.APIResult> getDiscount(
          {String? userToken, int? userID, String? discountCode}) =>
      (super.noSuchMethod(
              Invocation.method(#getDiscount, [], {
                #userToken: userToken,
                #userID: userID,
                #discountCode: discountCode
              }),
              returnValue: Future<_i4.APIResult>.value(_FakeAPIResult_2()))
          as _i11.Future<_i4.APIResult>);
}

/// A class which mocks [SessionApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionApi extends _i1.Mock implements _i12.SessionApi {
  MockSessionApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpFunctionsInterface get http =>
      (super.noSuchMethod(Invocation.getter(#http),
              returnValue: _FakeHttpFunctionsInterface_0())
          as _i2.HttpFunctionsInterface);
  @override
  set http(_i2.HttpFunctionsInterface? _http) =>
      super.noSuchMethod(Invocation.setter(#http, _http),
          returnValueForMissingStub: null);
  @override
  _i11.Future<_i5.SessionsResult> getAllSessions(
          {String? periodID, String? token}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getAllSessions, [], {#periodID: periodID, #token: token}),
              returnValue:
                  Future<_i5.SessionsResult>.value(_FakeSessionsResult_3()))
          as _i11.Future<_i5.SessionsResult>);
  @override
  _i11.Future<_i6.PeriodResult> getActivePeriodDetails(
          {int? userID, String? token}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getActivePeriodDetails, [], {#userID: userID, #token: token}),
          returnValue:
              Future<_i6.PeriodResult>.value(_FakePeriodResult_4())) as _i11
          .Future<_i6.PeriodResult>);
  @override
  _i11.Future<_i7.MedicalsResult> getAllMedicals(
          {int? userID, String? token}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getAllMedicals, [], {#userID: userID, #token: token}),
              returnValue:
                  Future<_i7.MedicalsResult>.value(_FakeMedicalsResult_5()))
          as _i11.Future<_i7.MedicalsResult>);
  @override
  _i11.Future<_i4.StateResult> setSessionScore(
          {String? sessionID, int? score, String? comment, String? token}) =>
      (super.noSuchMethod(
              Invocation.method(#setSessionScore, [], {
                #sessionID: sessionID,
                #score: score,
                #comment: comment,
                #token: token
              }),
              returnValue: Future<_i4.StateResult>.value(_FakeStateResult_6()))
          as _i11.Future<_i4.StateResult>);
}

/// A class which mocks [AccountingRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountingRepo extends _i1.Mock implements _i13.AccountingRepo {
  MockAccountingRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.UserStoredData get userStoredData =>
      (super.noSuchMethod(Invocation.getter(#userStoredData),
          returnValue: _FakeUserStoredData_7()) as _i8.UserStoredData);
  @override
  set userStoredData(_i8.UserStoredData? _userStoredData) =>
      super.noSuchMethod(Invocation.setter(#userStoredData, _userStoredData),
          returnValueForMissingStub: null);
  @override
  _i9.AccountingApiInterface get accountingApi =>
      (super.noSuchMethod(Invocation.getter(#accountingApi),
              returnValue: _FakeAccountingApiInterface_8())
          as _i9.AccountingApiInterface);
  @override
  set accountingApi(_i9.AccountingApiInterface? _accountingApi) =>
      super.noSuchMethod(Invocation.setter(#accountingApi, _accountingApi),
          returnValueForMissingStub: null);
  @override
  set lastPhone(String? _lastPhone) =>
      super.noSuchMethod(Invocation.setter(#lastPhone, _lastPhone),
          returnValueForMissingStub: null);
  @override
  _i11.Stream<_i14.Swimmer> get activeSwimmerStream => (super.noSuchMethod(
      Invocation.getter(#activeSwimmerStream),
      returnValue: Stream<_i14.Swimmer>.empty()) as _i11.Stream<_i14.Swimmer>);
  @override
  _i11.Stream<List<_i14.Swimmer>> get relativeSwimmersStream =>
      (super.noSuchMethod(Invocation.getter(#relativeSwimmersStream),
              returnValue: Stream<List<_i14.Swimmer>>.empty())
          as _i11.Stream<List<_i14.Swimmer>>);
  @override
  _i11.Stream<_i15.RegisterState> get registerStateStream =>
      (super.noSuchMethod(Invocation.getter(#registerStateStream),
              returnValue: Stream<_i15.RegisterState>.empty())
          as _i11.Stream<_i15.RegisterState>);
  @override
  String get token =>
      (super.noSuchMethod(Invocation.getter(#token), returnValue: '')
          as String);
  @override
  int get userID =>
      (super.noSuchMethod(Invocation.getter(#userID), returnValue: 0) as int);
  @override
  _i11.Future<_i4.StateResult> registerPhone(String? phone) =>
      (super.noSuchMethod(Invocation.method(#registerPhone, [phone]),
              returnValue: Future<_i4.StateResult>.value(_FakeStateResult_6()))
          as _i11.Future<_i4.StateResult>);
  @override
  _i11.Future<_i4.StateResult> verifyPhone(String? code) =>
      (super.noSuchMethod(Invocation.method(#verifyPhone, [code]),
              returnValue: Future<_i4.StateResult>.value(_FakeStateResult_6()))
          as _i11.Future<_i4.StateResult>);
  @override
  dynamic changeActiveSwimmer(_i14.Swimmer? activeSwimmer) => super
      .noSuchMethod(Invocation.method(#changeActiveSwimmer, [activeSwimmer]));
  @override
  _i11.Future<_i4.StateResult> insertSwimmer(
          _i14.Swimmer? swimmer, Map<String, String>? files) =>
      (super.noSuchMethod(Invocation.method(#insertSwimmer, [swimmer, files]),
              returnValue: Future<_i4.StateResult>.value(_FakeStateResult_6()))
          as _i11.Future<_i4.StateResult>);
}
